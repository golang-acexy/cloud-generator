package {{.PKG}}

import (
    "{{.ModelPKG}}"
    "github.com/golang-acexy/cloud-web/webcloud"
    "gorm.io/gorm"
)

var {{.ParamName}}BizService = &{{.StructName}}BizService[int64, model.{{.StructName}}SDTO, model.{{.StructName}}MDTO, model.{{.StructName}}QDTO, model.{{.StructName}}DTO]{
    repo: repo.New{{.StructName}}Repo(),
}

func New{{.StructName}}BizService() *{{.StructName}}BizService[int64, model.{{.StructName}}SDTO, model.{{.StructName}}MDTO, model.{{.StructName}}QDTO, model.{{.StructName}}DTO] {
    return {{.ParamName}}BizService
}


func (r {{.StructName}}Repo) RawMapper() {{.StructName}}Mapper {
	return {{.StructName}}Mapper{r.GormRepository.RawMapper()}
}

func (r {{.StructName}}Repo) WithTxRepo(tx *gorm.DB) *{{.StructName}}Repo {
	return &{{.StructName}}Repo{
		GormRepository: r.GormRepository.WithTxRepo(tx),
	}
}

func (r {{.StructName}}Repo) NewTxRepo(tx *gorm.DB) *{{.StructName}}Repo {
	return &{{.StructName}}Repo{
		GormRepository: r.GormRepository.NewTxRepo(),
	}
}

type {{.StructName}}BizService[ID webcloud.IDType, S, M, Q, D any] struct {
    repo *repo.{{.StructName}}Repo
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) MaxQueryCount() int {
    return 500
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) DefaultOrderBySQL() string {
    return "id desc"
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) Save(save *model.{{.StructName}}SDTO) (int64, error) {
    var t = save.ToT()
    _, err := v.repo.SaveExcludeZeroField(t)
    if err != nil {
        return 0, err
    }
    return t.ID, nil
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) BaseQueryByID(condition map[string]any, result *model.{{.StructName}}DTO) (row int64, err error) {
    var r model.{{.StructName}}
    row, err = v.repo.QueryOneByMap(condition, &r)
    if row > 0 {
        r.ParseDTO(result)
    }
    return
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) BaseQueryOne(condition map[string]any, result *model.{{.StructName}}DTO) (row int64, err error) {
    var r model.{{.StructName}}
    row, err = v.repo.QueryOneByMap(condition, &r)
    if row > 0 {
        r.ParseDTO(result)
    }
    return
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) BaseQuery(condition map[string]any, result *[]*model.{{.StructName}}DTO) (row int64, err error) {
    var r []*model.{{.StructName}}
    row, err = v.repo.QueryByGorm(&r, func(db *gorm.DB) {
        db.Where(condition).Order(v.DefaultOrderBySQL()).Limit(v.MaxQueryCount()).Scan(&r)
    })
    if row > 0 {
        model.{{.StructName}}Slice(r).ParseDTOs(result)
    }
    return
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) BaseQueryByPager(condition map[string]any, pager webcloud.Pager[model.{{.StructName}}DTO]) error {
    p := databasecloud.Pager[model.{{.StructName}}]{
        Number: pager.Number,
        Size:   pager.Size,
    }
    err := v.repo.QueryPageByMap(condition, v.DefaultOrderBySQL(), &p)
    if err != nil {
        return err
    }
    pager.Records = model.{{.StructName}}Slice(p.Records).ToDTOs()
    pager.Total = p.Total
    return nil
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) BaseModifyByID(update, condition map[string]any) (int64, error) {
    return v.repo.ModifyByMap(update, condition)
}

func (v *{{.StructName}}BizService[ID, S, M, Q, D]) BaseRemoveByID(condition map[string]any) (int64, error) {
    return v.repo.RemoveByMap(condition)
}

// QueryByID 通过主键查询
func (v *{{.StructName}}BizService[ID, S, M, Q, D]) QueryByID(id ID) *model.{{.StructName}}DTO {
	var r model.{{.StructName}}
	row, err := v.repo.QueryByID(id, &r)
	if row > 0 && err == nil {
		return r.ToDTO()
	}
	return nil
}

// QueryOneByCond 通过条件查询一条数据
func (v *{{.StructName}}BizService[ID, S, M, Q, D]) QueryOneByCond(condition *model.{{.StructName}}QDTO) *model.{{.StructName}}DTO {
	var r model.{{.StructName}}
	row, err := v.repo.QueryOneByCond(condition.ToT(), &r)
	if row > 0 && err == nil {
		return r.ToDTO()
	}
	return nil
}

// QueryByCond 通过条件查询多条数据
func (v *{{.StructName}}BizService[ID, S, M, Q, D]) QueryByCond(condition *model.{{.StructName}}QDTO) []*model.{{.StructName}}DTO {
	var rs []*model.{{.StructName}}
	row, err := v.repo.QueryByCond(condition.ToT(), v.DefaultOrderBySQL(), &rs)
	if row > 0 && err == nil {
		return model.{{.StructName}}Slice(rs).ToDTOs()
	}
	return nil
}

// QueryByPager 分页查询
func (v *{{.StructName}}BizService[ID, S, M, Q, D]) QueryByPager(pager webcloud.PagerDTO[model.{{.StructName}}QDTO]) webcloud.Pager[model.{{.StructName}}DTO] {
	p := databasecloud.Pager[model.{{.StructName}}]{
		Number: pager.Number,
		Size:   pager.Size,
	}
	r := webcloud.Pager[model.{{.StructName}}DTO]{
		Number: pager.Number,
		Size:   pager.Size,
	}
	err := v.repo.QueryPageByCond(pager.Condition.ToT(), v.DefaultOrderBySQL(), &p)
	if err == nil {
		r.Total = p.Total
		r.Records = model.{{.StructName}}Slice(p.Records).ToDTOs()
	}
	return r
}

// ModifyByID 根据主键修改数据
func (v *{{.StructName}}BizService[ID, S, M, Q, D]) ModifyByID(updated *model.{{.StructName}}MDTO) bool {
	row, err := v.repo.ModifyByID(updated.ToT())
	return row > 0 && err == nil
}

// RemoveByID 根据主键删除数据
func (v *{{.StructName}}BizService[ID, S, M, Q, D]) RemoveByID(id ID) bool {
	row, err := v.repo.RemoveByID(id)
	return row > 0 && err == nil
}
